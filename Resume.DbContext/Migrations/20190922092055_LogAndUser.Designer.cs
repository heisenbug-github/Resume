// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Resume.DbContext;

namespace Resume.DbContext.Migrations
{
    [DbContext(typeof(ResumeDbContext))]
    [Migration("20190922092055_LogAndUser")]
    partial class LogAndUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Resume.Entities.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnName("change_date");

                    b.Property<string>("ChangeType")
                        .IsRequired()
                        .HasColumnName("change_type");

                    b.Property<long>("ClusteredIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("clustered_index")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnName("entity_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("RecordId")
                        .HasColumnName("record_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_log");

                    b.HasIndex("ClusteredIndex")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .HasName("ix_log_user_id");

                    b.ToTable("log");
                });

            modelBuilder.Entity("Resume.Entities.LogDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<long>("ClusteredIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("clustered_index")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("LogId")
                        .HasColumnName("log_id");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasColumnName("new_value");

                    b.Property<string>("OriginalValue")
                        .IsRequired()
                        .HasColumnName("original_value");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasColumnName("property_name");

                    b.HasKey("Id")
                        .HasName("pk_log_detail");

                    b.HasIndex("ClusteredIndex")
                        .IsUnique();

                    b.HasIndex("LogId")
                        .HasName("ix_log_detail_log_id");

                    b.ToTable("log_detail");
                });

            modelBuilder.Entity("Resume.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Body")
                        .HasColumnName("body");

                    b.Property<long>("ClusteredIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("clustered_index")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsRead")
                        .HasColumnName("is_read");

                    b.Property<DateTime>("MessageDate")
                        .HasColumnName("message_date");

                    b.Property<string>("SenderEmail")
                        .HasColumnName("sender_email");

                    b.Property<string>("SenderName")
                        .HasColumnName("sender_name");

                    b.Property<string>("Subject")
                        .HasColumnName("subject");

                    b.HasKey("Id")
                        .HasName("pk_message");

                    b.HasIndex("ClusteredIndex")
                        .IsUnique();

                    b.ToTable("message");
                });

            modelBuilder.Entity("Resume.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<long>("ClusteredIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("clustered_index")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("first_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("ClusteredIndex")
                        .IsUnique();

                    b.ToTable("user");
                });

            modelBuilder.Entity("Resume.Entities.Log", b =>
                {
                    b.HasOne("Resume.Entities.User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_log_users_user_id")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Resume.Entities.LogDetail", b =>
                {
                    b.HasOne("Resume.Entities.Log", "Log")
                        .WithMany("LogDetails")
                        .HasForeignKey("LogId")
                        .HasConstraintName("fk_log_detail_log_log_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
